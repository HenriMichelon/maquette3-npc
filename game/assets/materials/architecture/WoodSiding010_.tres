[gd_resource type="ShaderMaterial" load_steps=7 format=3 uid="uid://h88nel3i3vvl"]

[ext_resource type="Texture2D" uid="uid://bjuhsf1rpjcwa" path="res://assets/textures/architecture/WoodSiding010/WoodSiding010_1K-JPG_Color.jpg" id="1_x6e34"]
[ext_resource type="Texture2D" uid="uid://wmy2m8owjapg" path="res://assets/textures/architecture/WoodSiding010/WoodSiding010_1K-JPG_AmbientOcclusion.jpg" id="2_865an"]
[ext_resource type="Texture2D" uid="uid://c7td5pdud2bft" path="res://assets/textures/architecture/WoodSiding010/WoodSiding010_1K-JPG_Displacement.jpg" id="3_p3pkw"]
[ext_resource type="Texture2D" uid="uid://uyaa156b4rqv" path="res://assets/textures/architecture/WoodSiding010/WoodSiding010_1K-JPG_NormalGL.jpg" id="4_2p3dy"]
[ext_resource type="Texture2D" uid="uid://brjyvpbi6cvrd" path="res://assets/textures/architecture/WoodSiding010/WoodSiding010_1K-JPG_Roughness.jpg" id="5_qptsk"]

[sub_resource type="Shader" id="Shader_ckxpw"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.2.1.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx,depth_prepass_alpha;
uniform float alpha = 1.0;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_linear_mipmap,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_linear_mipmap,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_linear_mipmap,repeat_enable;
uniform float specular;
uniform float metallic;
uniform sampler2D texture_normal : hint_roughness_normal,filter_linear_mipmap,repeat_enable;
uniform float normal_scale : hint_range(-16,16);
uniform sampler2D texture_ambient_occlusion : hint_default_white, filter_linear_mipmap,repeat_enable;
uniform vec4 ao_texture_channel;
uniform float ao_light_affect;
uniform sampler2D texture_heightmap : hint_default_black,filter_linear_mipmap,repeat_enable;
uniform float heightmap_scale;
uniform int heightmap_min_layers;
uniform int heightmap_max_layers;
uniform vec2 heightmap_flip;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
}






void fragment() {
	vec2 base_uv = UV;
	{
		vec3 view_dir = normalize(normalize(-VERTEX + EYE_OFFSET) * mat3(TANGENT * heightmap_flip.x, -BINORMAL * heightmap_flip.y, NORMAL));
		float depth = 1.0 - texture(texture_heightmap, base_uv).r;
		vec2 ofs = base_uv - view_dir.xy * depth * heightmap_scale * 0.01;
		base_uv=ofs;
	}
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	NORMAL_MAP = texture(texture_normal,base_uv).rgb;
	NORMAL_MAP_DEPTH = normal_scale;
	AO = dot(texture(texture_ambient_occlusion,base_uv),ao_texture_channel);
	AO_LIGHT_AFFECT = ao_light_affect;
	ALPHA = alpha;
}
"

[resource]
render_priority = 0
shader = SubResource("Shader_ckxpw")
shader_parameter/alpha = 1.0
shader_parameter/albedo = Color(1, 1, 1, 0.45098)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 1.0
shader_parameter/metallic_texture_channel = null
shader_parameter/specular = 0.0
shader_parameter/metallic = 0.0
shader_parameter/normal_scale = 1.0
shader_parameter/ao_texture_channel = null
shader_parameter/ao_light_affect = 0.0
shader_parameter/heightmap_scale = 5.0
shader_parameter/heightmap_min_layers = 8
shader_parameter/heightmap_max_layers = 32
shader_parameter/heightmap_flip = Vector2(1, 1)
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/texture_albedo = ExtResource("1_x6e34")
shader_parameter/texture_roughness = ExtResource("5_qptsk")
shader_parameter/texture_normal = ExtResource("4_2p3dy")
shader_parameter/texture_ambient_occlusion = ExtResource("2_865an")
shader_parameter/texture_heightmap = ExtResource("3_p3pkw")
